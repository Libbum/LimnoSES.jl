var documenterSearchIndex = {"docs":
[{"location":"api/","page":"Public API","title":"Public API","text":"None of this is final, but some current public facing functions:","category":"page"},{"location":"api/","page":"Public API","title":"Public API","text":"initialise\nplanner\nplan\npolicy\nscan\nobjectives\nobjective","category":"page"},{"location":"api/#LimnoSES.initialise","page":"Public API","title":"LimnoSES.initialise","text":"initialise()\n\nReturns a populated model initialised and ready to run.\n\n\n\n\n\n","category":"function"},{"location":"api/#LimnoSES.planner","page":"Public API","title":"LimnoSES.planner","text":"planner(plan(Angling))\nplanner(plan(Planting; rate=5e-3),\n        plan(Trawling, 1:3))\n\nProvides a complete schedule of interventions for a Municipality. Must be used in conjunction with plan.\n\n\n\n\n\n","category":"function"},{"location":"api/#LimnoSES.plan","page":"Public API","title":"LimnoSES.plan","text":"plan(Angling) # Assume always on\nplan(Angling; rate = 2.5e-3) # Always on with custom rate\nplan(Angling, 7; rate = 3.2e-3) # Only one year (custom rate)\nplan(Angling, 3:5) # Only years 3 to 5\nplan(Angling, [(period = 1:4, ),\n               (year = 5, rate = 7.2e-3),\n               (period = 7:9, )]) # Active in years 1-5, 7-9 with a custom rate\n                                  # in year 5\n\nHelper that provides complex scheduling for interventions with a simple interface.\n\nThe return type is Dict{Int, Vector{Intervention}}, were the key is each year the collection of interventions will be active. As a convention, year -1 denotes an 'always active' intervention.\n\nThe result can be provided to municipality.interventions, although this function should almost always used in conjunction with planner.\n\n\n\n\n\n","category":"function"},{"location":"api/#LimnoSES.policy","page":"Public API","title":"LimnoSES.policy","text":"policy(scan(Trawling), scan(Planting; rate = (1e-5, 2.6e-3)))\n\nEnables the decision module to alter suggested planner values, optimising the system state when possible. Used to set the policies of each Municipality.\n\n\n\n\n\n","category":"function"},{"location":"api/#LimnoSES.scan","page":"Public API","title":"LimnoSES.scan","text":"scan(Trawling) # Activate decisions on trawling using default ranges.\nscan(Trawling; rate = (5e-3, 2e-2)) # Activate trawling decisions with custom\n                                    # search range for `rate`.\n\nUse the decision making optimiser to fine tune values in the planner. scan expects a lower and upper bound of a range to scan for each intervention property. For the moment, this strategy excludes WastewaterTreatment, and does not adjust active years. These must still be set in the planner.\n\nShould be used in conjunction with policy.\n\n\n\n\n\n","category":"function"},{"location":"api/#LimnoSES.objectives","page":"Public API","title":"LimnoSES.objectives","text":"objectives(objective(min_time), objective(min_cost, 0.5))\n\nConstructs a set of objectives which will be used to optimise policy towards the chosen target.\n\n\n\n\n\n","category":"function"},{"location":"api/#LimnoSES.objective","page":"Public API","title":"LimnoSES.objective","text":"objective(min_time)\nobjective(min_acceleration, 2)\n\nProvides a weighted objective to be used when optimising policy. Should be used in conjunction with objectives.\n\nWhen providing a weight, this value can be any positive Real number which will rank this objective higher or lower than other objectives. It is not imperative to make sure all numbers entered in the policy to add up to 100%, but bear in mind that the values will be normalised for the optimisation.\n\n\n\n\n\n","category":"function"},{"location":"api/#NutrientSeries","page":"Public API","title":"NutrientSeries","text":"","category":"section"},{"location":"api/","page":"Public API","title":"Public API","text":"NutrientSeries is an abstract type from which concrete types can be implemented to describe the dynamics of nutrient introduction to the lake.","category":"page"},{"location":"api/","page":"Public API","title":"Public API","text":"Constant\nDynamic\nTransientUp\nTransientDown","category":"page"},{"location":"api/#LimnoSES.Constant","page":"Public API","title":"LimnoSES.Constant","text":"Constant()\n\nNutrient level remains constant at the level of init_nutrients.\n\n\n\n\n\n","category":"type"},{"location":"api/#LimnoSES.Dynamic","page":"Public API","title":"LimnoSES.Dynamic","text":"Dynamic()\n\nNutrient runoff is managed by the municipality by incentivising households to upgrade sewage systems that seep P into the lake.\n\n\n\n\n\n","category":"type"},{"location":"api/#LimnoSES.TransientUp","page":"Public API","title":"LimnoSES.TransientUp","text":"TransientUp(;start_year = 11, post_target_series = Constant())\n\nSynthetic nutrient profile that alters lake dynamics regardless of municipal management.\n\nstart_year: year when nutrients begin to increase with a rate of nutrient_change.\npost_target_series: behaviour after target_nutrients value is reached.   Default is TransientDown(start_year = 0, post_target_series = Constant())\n\nwarning: Warning\nPost target series selection must include a final Constant phase, otherwise an infinite recursion cascade will occur.\n\n\n\n\n\n","category":"type"},{"location":"api/#LimnoSES.TransientDown","page":"Public API","title":"LimnoSES.TransientDown","text":"TransientDown(;start_year = 11, post_target_series = Constant())\n\nSynthetic nutrient profile that alters lake dynamics regardless of municipal management.\n\nstart_year: year when nutrients begin to decrease with a rate of nutrient_change.\npost_target_series: behaviour after target_nutrients value is reached.   Default is TransientUp(start_year = 0, post_target_series = Constant())\n\nwarning: Warning\nPost target series selection must include a final Constant phase, otherwise an infinite recursion cascade will occur.\n\n\n\n\n\n","category":"type"},{"location":"api/#Decisions","page":"Public API","title":"Decisions","text":"","category":"section"},{"location":"api/","page":"Public API","title":"Public API","text":"This system uses BlackBoxOptim.jl to set intervention policies that satisfy a number of objectives whilst attempting to reach a given target.","category":"page"},{"location":"api/","page":"Public API","title":"Public API","text":"LimnoSES.make_decision!","category":"page"},{"location":"api/#LimnoSES.make_decision!","page":"Public API","title":"LimnoSES.make_decision!","text":"make_decision!(model)\n\nRuns the optimisation routine, calling on policy ranges set via policy. Decisions are made only from the year of the call onwards.\n\nKeywords\n\nA few keywords that can be sent to the bboptimize routine have been made available here:\n\nMaxTime = 300, a hard time limit for the optimiser to run.\nTraceMode = :compact, logging output control. Other options are :silent and\n\n:verbose.\n\n\n\n\n\n","category":"function"},{"location":"api/#Targets","page":"Public API","title":"Targets","text":"","category":"section"},{"location":"api/","page":"Public API","title":"Public API","text":"Targets are written in the form of an Agents.jl until function. Any stopping condition is possible and can be user generated, although there must be a hard stop at some point in the future. s == 100 && return true is the default. The following examples are pre-defined:","category":"page"},{"location":"api/","page":"Public API","title":"Public API","text":"LimnoSES.clear_state\nLimnoSES.managed_clear_eutrophic","category":"page"},{"location":"api/#LimnoSES.clear_state","page":"Public API","title":"LimnoSES.clear_state","text":"clear_state(model, s)\n\nTargets the clear lake steady state, with an extra stopping condition if that state was not reached within 100 years.\n\nCalculated via instantaneous comparisons at latest model time of all lake variables, with an additional check to verify a near-zero first derivative.\n\nNOTE: This target is hard coded to the default Martin parameters.\n\n\n\n\n\n","category":"function"},{"location":"api/#LimnoSES.managed_clear_eutrophic","page":"Public API","title":"LimnoSES.managed_clear_eutrophic","text":"managed_clear_eutrophic(model, s)\n\nTargets the T3 state, which is a high nutrient (N>=3), unstable state with a high pike population. Will stop at 100 years if not successful.\n\nNote: For the moment this targets the region of T3, not the explicit starting point.\n\n\n\n\n\n","category":"function"},{"location":"api/#Objectives","page":"Public API","title":"Objectives","text":"","category":"section"},{"location":"api/","page":"Public API","title":"Public API","text":"There is no 'right' way of meeting a target, since we may have multiple objectives to contend with. Objectives are a function that take model as an argument and return a Float64.","category":"page"},{"location":"api/","page":"Public API","title":"Public API","text":"Once created, these should be initialised using objective, since the model also expects an associated weight.","category":"page"},{"location":"api/","page":"Public API","title":"Public API","text":"Pre-defined values:","category":"page"},{"location":"api/","page":"Public API","title":"Public API","text":"LimnoSES.min_time\nLimnoSES.min_acceleration\nLimnoSES.min_cost","category":"page"},{"location":"api/#LimnoSES.min_time","page":"Public API","title":"LimnoSES.min_time","text":"min_time(model)\n\nObjective function that returns the time of the model at the end of a run. If a target function is interested in moving from one state to the next in the quickest amount of time, this is a useful objective.\n\n\n\n\n\n","category":"function"},{"location":"api/#LimnoSES.min_acceleration","page":"Public API","title":"LimnoSES.min_acceleration","text":"min_acceleration(model)\n\nObjective function that returns the sum of the absolute value of the second derivative of all lake variables. Span is from start of the optimisation to the final model.year with monthly increments.\n\nHelps to mitigate large spikes in transitions.\n\n\n\n\n\n","category":"function"},{"location":"api/#LimnoSES.min_cost","page":"Public API","title":"LimnoSES.min_cost","text":"min_cost(model)\n\nObjective function that returns a \"cost\" of future Planting and Trawling interventions, which ultimately is just a sum of all proposed rates.\n\nIn future it will be possible to apply a weight to each of the interventions as one is most likely more costly than the other.\n\n\n\n\n\n","category":"function"},{"location":"dev/","page":"Developer Docs","title":"Developer Docs","text":"Non exported functions can be found here.","category":"page"},{"location":"dev/","page":"Developer Docs","title":"Developer Docs","text":"LimnoSES.type2dict\nLimnoSES.nutrient_load!\nLimnoSES.active_interventions","category":"page"},{"location":"dev/#LimnoSES.type2dict","page":"Developer Docs","title":"LimnoSES.type2dict","text":"type2dict(struct; prefix = \"\")\n\nConverts a struct into a Dict. Borrowed from DrWatson, but extended to allow some prefix to be attached. This is helpful when merging multiple structs into one Dict.\n\n\n\n\n\n","category":"function"},{"location":"dev/#LimnoSES.nutrient_load!","page":"Developer Docs","title":"LimnoSES.nutrient_load!","text":"nutrient_load(model::ABM, series<:NutrientSeries)\n\nUpdates lake nutrient concentration accorting to series type.\n\nSee NutrientSeries for more details.\n\n\n\n\n\n","category":"function"},{"location":"dev/#LimnoSES.active_interventions","page":"Developer Docs","title":"LimnoSES.active_interventions","text":"active_interventions(municipality, year)\n\nReturns all active interventions in the planner. Due to the year = -1 -> always active convention we must merge the current year's plan with the -1 key (if extant).\n\n\n\n\n\n","category":"function"},{"location":"dev/#Decisions-Private-Functions","page":"Developer Docs","title":"Decisions Private Functions","text":"","category":"section"},{"location":"dev/","page":"Developer Docs","title":"Developer Docs","text":"LimnoSES.create_test_model\nLimnoSES.apply_policies!\nLimnoSES.update_true_model!\nLimnoSES.cost\nLimnoSES.weightedfitness","category":"page"},{"location":"dev/#LimnoSES.create_test_model","page":"Developer Docs","title":"LimnoSES.create_test_model","text":"create_test_model(model)\n\nCreates a complete copy of the current model, with a modified set of interventions. All \"completed\" interventions (i.e. ones that have happened in the models' past) are ignored. This test model is then used in the optimisation procedure.\n\n\n\n\n\n","category":"function"},{"location":"dev/#LimnoSES.apply_policies!","page":"Developer Docs","title":"LimnoSES.apply_policies!","text":"apply_policies!(x, test::ABM)\n\nApplies new test values to all active intervention properties. Is used before each optimisation call, but also to finalise the decision process via a best_candidate call.\n\n\n\n\n\n","category":"function"},{"location":"dev/#LimnoSES.update_true_model!","page":"Developer Docs","title":"LimnoSES.update_true_model!","text":"update_true_model!(test, model)\n\nReconstructs each municipalities interventions property in the model after a successful optimisation run. Be careful with the model order here, as there's no simple way to differentiate the two of them via types.\n\n\n\n\n\n","category":"function"},{"location":"dev/#LimnoSES.cost","page":"Developer Docs","title":"LimnoSES.cost","text":"cost(x, u0, p, test::ABM)\n\nOptimization function. To be used in in conjunction with the bboptimize call only. Needs to be overloaded slightly, since we want to reset the lake dynamics at each call, so model.lake.u and model.lake.p are expected to be passed into the second and third variables respectively, with the cut down \"test\" version of the model being the last value.\n\n\n\n\n\n","category":"function"},{"location":"dev/#LimnoSES.weightedfitness","page":"Developer Docs","title":"LimnoSES.weightedfitness","text":"weightedfitness(f, weights)\n\nHandle objective weights. Should be used as an aggregator in bboptimize.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Introduction","title":"Introduction","text":"LimnoSES.jl is a dynamical system, agent based model hybrid, focusing on socio-ecological interactions in lake systems.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Powered by the Agents.jl ABM framework and the DifferentialEquations.jl ecosystem.","category":"page"}]
}
